from typing import Dict, List, Any, Optional, Set, Callable
from typing import Pattern

class ComplexityMixin:
    def _calculate_complexity(self, node: Any) -> Dict[str, int]: ...
    def _analyze_complexity_recursive(
        self, node: Any, complexity: Dict[str, int], depth: int, max_depth: int = ...
    ) -> None: ...
    def _get_decision_node_types(self) -> Set[str]: ...
    def _get_nesting_node_types(self) -> Set[str]: ...

class TodoExtractionMixin:
    TODO_PATTERNS: List[str]
    _todo_regexps: Dict[str, Pattern[str]]

    def _extract_todos(self, node: Any) -> List[Dict[str, Any]]: ...
    def _find_todos_recursive(self, node: Any, todos: List[Dict[str, Any]]) -> None: ...
    def _clean_comment_text(self, text: str) -> str: ...

class SecurityAnalysisMixin:
    def _detect_security_issues(self, node: Any) -> List[Dict[str, Any]]: ...
    def _analyze_security_recursive(self, node: Any, issues: List[Dict[str, Any]]) -> None: ...
    def _get_security_patterns(self) -> List[Callable[[Any, str], dict]]: ...
    def _check_sql_injection(self, node: Any, text: str) -> Optional[Dict[str, Any]]: ...
    def _check_hardcoded_credentials(self, node: Any, text: str) -> Optional[Dict[str, Any]]: ...
    def _check_weak_crypto(self, node: Any, text: str) -> Optional[Dict[str, Any]]: ...
    def _check_unsafe_deserialization(self, node: Any, text: str) -> Optional[Dict[str, Any]]: ...

class PatternDetectionMixin:
    def _detect_patterns(
        self, node: Any, metadata: Dict[str, Any] = ...
    ) -> Dict[str, List[str]]: ...
    def _detect_language_patterns(
        self, node: Any, patterns: Dict[str, List[str]], metadata: Optional[Dict[str, Any]] = ...
    ) -> Dict[str, List[str]]: ...

class DependencyAnalysisMixin:
    config: Any

    def _analyze_dependencies(self, node: Any) -> Dict[str, List[str]]: ...
    def _find_import_nodes(self, node: Any) -> List[Any]: ...
    def _extract_dependencies_from_import(self, import_node: Any) -> List[str]: ...
    def _is_internal_dependency(self, dep: str) -> bool: ...
