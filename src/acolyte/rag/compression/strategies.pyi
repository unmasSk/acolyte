import re
from abc import ABC, abstractmethod
from typing import Optional, Dict

from acolyte.models.document import DocumentType

class CompressionStrategy(ABC):
    @abstractmethod
    def compress(self, content: str, relevance_score: float, target_ratio: float = ...) -> str: ...
    def extract_lines_around(
        self, content: str, target_line: int, context_lines: int = ...
    ) -> str: ...

class CodeCompressionStrategy(CompressionStrategy):
    FUNCTION_PATTERNS: Dict[str, re.Pattern[str]]
    language: str
    function_pattern: re.Pattern[str]
    max_comment_length: int
    max_empty_lines: int
    max_signatures: int

    def __init__(self, language: str = ...) -> None: ...
    def compress(self, content: str, relevance_score: float, target_ratio: float = ...) -> str: ...
    def _extract_signatures(self, content: str) -> str: ...
    def _minimal_compression(self, content: str) -> str: ...
    def _medium_compression(self, content: str) -> str: ...

class MarkdownCompressionStrategy(CompressionStrategy):
    HEADER_PATTERN: re.Pattern[str]
    section_preview_chars: int
    max_headers: int

    def __init__(self) -> None: ...
    def compress(self, content: str, relevance_score: float, target_ratio: float = ...) -> str: ...
    def _extract_relevant_section(self, content: str) -> str: ...
    def _headers_with_summary(self, content: str) -> str: ...
    def _extract_headers_only(self, content: str) -> str: ...

class ConfigCompressionStrategy(CompressionStrategy):
    max_lines: int
    max_sections: int

    def __init__(self) -> None: ...
    def compress(self, content: str, relevance_score: float, target_ratio: float = ...) -> str: ...
    def _extract_relevant_section(self, content: str) -> str: ...
    def _extract_key_values(self, content: str) -> str: ...
    def _extract_sections_only(self, content: str) -> str: ...

class DataCompressionStrategy(CompressionStrategy):
    sample_rows: int
    max_create_statements: int

    def __init__(self) -> None: ...
    def compress(self, content: str, relevance_score: float, target_ratio: float = ...) -> str: ...
    def _extract_data_sample(self, content: str) -> str: ...
    def _extract_schema(self, content: str) -> str: ...
    def _extract_metadata(self, content: str) -> str: ...

class OtherCompressionStrategy(CompressionStrategy):
    max_content_high: int
    max_lines_preview: int

    def __init__(self) -> None: ...
    def compress(self, content: str, relevance_score: float, target_ratio: float = ...) -> str: ...

def get_compression_strategy(
    document_type: DocumentType, language: Optional[str] = ...
) -> CompressionStrategy: ...
