from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

from acolyte.core.tracing import MetricsCollector
from acolyte.models.chunk import Chunk
from acolyte.rag.enrichment.processors import GraphBuilder
import git

class EnrichmentService:
    repo_path: Path
    metrics: MetricsCollector
    _cache: Dict[str, Dict[str, Any]]
    repo: Optional[git.Repo]
    has_git: bool
    graph_builder: GraphBuilder

    def __init__(self, repo_path: str = ...) -> None: ...
    async def enrich_chunks(
        self, chunks: List[Chunk], trigger: str = ...
    ) -> List[Tuple[Chunk, Dict[str, Any]]]: ...
    async def enrich_file(self, file_path: str) -> Dict[str, Any]: ...
    async def enrich_files_batch(self, file_paths: List[str]) -> Dict[str, Dict[str, Any]]: ...
    async def _enrich_single_chunk(self, chunk: Chunk) -> Dict[str, Any]: ...
    async def _get_file_metadata(self, chunk: Chunk) -> Dict[str, Any]: ...
    async def _get_git_metadata(self, chunk: Chunk) -> Dict[str, Any]: ...
    async def _detect_patterns(self, chunk: Chunk) -> Dict[str, Any]: ...
    def _get_cache_key(self, chunk: Chunk) -> str: ...
    def _calculate_merge_conflicts(self, file_path: str) -> int: ...
    def _calculate_directory_moves(self, file_path: str) -> int: ...
    def _calculate_code_volatility(self, file_path: str) -> float: ...
    def _calculate_stability_score(self, conflicts: int, volatility: float) -> float: ...
    def _calculate_recent_commits(self, file_path: str) -> int: ...
    def _count_file_lines(self, file_path: str) -> int: ...
    def _get_last_commit_info(self, file_path: str) -> Dict[str, Any]: ...
    def _get_file_creation_info(self, file_path: str) -> Dict[str, Any]: ...
    def _analyze_contributors(self, file_path: str) -> Dict[str, Dict[str, Any]]: ...
    def _count_total_commits(self, file_path: str) -> int: ...
    def _calculate_change_frequency(self, file_path: str) -> float: ...
    def _analyze_commit_types(self, file_path: str) -> Dict[str, int]: ...
    def _find_last_refactor_date(self, file_path: str) -> Optional[str]: ...
    def _find_co_modified_files(self, file_path: str) -> List[str]: ...
    def _determine_modification_pattern(
        self, commits_30_days: int, freq_per_week: float, total_commits: int
    ) -> str: ...
