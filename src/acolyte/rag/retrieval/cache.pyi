from typing import Dict, List, Optional, Tuple, Any
from collections import OrderedDict

from acolyte.core.tracing import MetricsCollector
from acolyte.models.chunk import Chunk

class SearchCache:
    max_size: int
    ttl: int
    metrics: MetricsCollector
    cache: OrderedDict[str, Tuple[List[Chunk], float]]

    def __init__(self, max_size: int = 1000, ttl: int = 3600) -> None: ...
    def _hash_query(self, query: str, filters: Optional[Dict[str, Any]] = None) -> str: ...
    def get(
        self, query: str, filters: Optional[Dict[str, Any]] = None
    ) -> Optional[List[Chunk]]: ...
    def set(
        self, query: str, results: List[Chunk], filters: Optional[Dict[str, Any]] = None
    ) -> None: ...
    def invalidate_by_pattern(self, pattern: str) -> None: ...
    def invalidate_by_file(self, file_path: str) -> None: ...
    def clear(self) -> None: ...
    def get_hit_rate(self) -> float: ...
    def get_stats(self) -> Dict[str, Any]: ...
    def warm_cache(self, common_queries: List[Tuple[str, List[Chunk]]]) -> None: ...
