from datetime import datetime
from typing import Dict, Any, List, Optional

from acolyte.models.chunk import Chunk, ChunkType

class SearchFilters:
    applied_filters: List[Any]

    def __init__(self) -> None: ...
    def filter_by_type(self, chunks: List[Chunk], file_types: List[str]) -> List[Chunk]: ...
    def filter_by_date(
        self, chunks: List[Chunk], start: Optional[datetime] = None, end: Optional[datetime] = None
    ) -> List[Chunk]: ...
    def filter_by_language(self, chunks: List[Chunk], languages: List[str]) -> List[Chunk]: ...
    def filter_by_path(self, chunks: List[Chunk], path_pattern: str) -> List[Chunk]: ...
    def filter_by_chunk_type(
        self, chunks: List[Chunk], chunk_types: List[ChunkType]
    ) -> List[Chunk]: ...
    def apply(self, chunks: List[Chunk], filters: Dict[str, Any]) -> List[Chunk]: ...
    def to_weaviate_where(self, filters: Dict[str, Any]) -> Optional[Dict[str, Any]]: ...
