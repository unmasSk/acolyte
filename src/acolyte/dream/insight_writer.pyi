"""
Dream Insight Writer - Generates and stores analysis insights.

Writes insights to both database and filesystem in human-readable format.
Creates actionable documents that developers can use immediately.
"""

from typing import Dict, Any, List, Optional
from pathlib import Path
from acolyte.core.database import DatabaseManager
from acolyte.core.secure_config import Settings

class InsightWriter:
    db: DatabaseManager
    config: Settings
    dream_folder: str
    keep_days: int
    dream_path: Path

    def __init__(self) -> None: ...
    def _sanitize_filename(self, name: str) -> str: ...
    async def write_insights(
        self,
        session_id: str,
        insights: List[Dict[str, Any]],
        focus_areas: Optional[List[str]] = None,
    ) -> Dict[str, Any]: ...
    def _categorize_insights(
        self, insights: List[Dict[str, Any]]
    ) -> Dict[str, List[Dict[str, Any]]]: ...
    async def _write_to_database(self, session_id: str, insights: List[Dict[str, Any]]) -> int: ...
    async def _insert_insight(
        self, session_id: str, insight_type: str, data: Dict[str, Any]
    ) -> None: ...
    def _map_insight_type(self, type_str: str) -> str: ...
    def _calculate_confidence(self, data: Dict[str, Any]) -> float: ...
    def _determine_impact(self, data: Dict[str, Any]) -> str: ...
    def _extract_entities(self, data: Dict[str, Any]) -> List[str]: ...
    def _extract_references(self, data: Dict[str, Any]) -> List[str]: ...
    async def _write_document(
        self,
        session_id: str,
        categorized: Dict[str, List[Dict[str, Any]]],
        focus_areas: Optional[List[str]],
    ) -> Path: ...
    def _generate_markdown(
        self,
        session_id: str,
        categorized: Dict[str, List[Dict[str, Any]]],
        focus_areas: Optional[List[str]],
    ) -> str: ...
    def _generate_executive_summary(
        self, categorized: Dict[str, List[Dict[str, Any]]]
    ) -> List[str]: ...
    def _format_bug(self, bug: Dict[str, Any]) -> List[str]: ...
    def _format_security_issue(self, issue: Dict[str, Any]) -> List[str]: ...
    def _format_performance_issue(self, issue: Dict[str, Any]) -> List[str]: ...
    def _format_architectural_issue(self, issue: Dict[str, Any]) -> List[str]: ...
    def _format_pattern(self, pattern: Dict[str, Any]) -> List[str]: ...
    def _generate_recommendations(
        self, categorized: Dict[str, List[Dict[str, Any]]]
    ) -> List[str]: ...
    def _generate_next_steps(self, categorized: Dict[str, List[Dict[str, Any]]]) -> List[str]: ...
    def _generate_summary_stats(
        self, categorized: Dict[str, List[Dict[str, Any]]]
    ) -> Dict[str, int]: ...
    async def _update_summary(self, categorized: Dict[str, List[Dict[str, Any]]]) -> None: ...
    def _get_top_issues(
        self, categorized: Dict[str, List[Dict[str, Any]]], limit: int
    ) -> List[Dict[str, str]]: ...
    async def _cleanup_old_insights(self) -> None: ...
