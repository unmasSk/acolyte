from fastapi import APIRouter, BackgroundTasks
from pydantic import BaseModel, field_validator
from typing import List, Dict, Any, Optional
from pathlib import Path

router: APIRouter

class ProjectIndexRequest(BaseModel):
    patterns: List[str] = ...
    exclude_patterns: List[str] = ...
    respect_gitignore: bool = ...
    respect_acolyteignore: bool = ...
    force_reindex: bool = ...

    @field_validator("patterns")
    @classmethod
    def validate_patterns(cls, v: List[str]) -> List[str]: ...
    @field_validator("exclude_patterns")
    @classmethod
    def validate_exclude_patterns(cls, v: List[str]) -> List[str]: ...

class GitChangeFile(BaseModel):
    path: str
    action: str
    old_path: Optional[str] = ...
    diff: Optional[str] = ...

    @field_validator("action")
    @classmethod
    def validate_action(cls, v: str) -> str: ...
    @field_validator("path")
    @classmethod
    def validate_path(cls, v: str) -> str: ...

class GitChangesRequest(BaseModel):
    trigger: str
    files: List[GitChangeFile]
    commit_hash: Optional[str] = ...
    branch: Optional[str] = ...
    author: Optional[str] = ...
    message: Optional[str] = ...
    timestamp: Optional[int] = ...
    metadata: Dict[str, Any] = ...

    @field_validator("trigger")
    @classmethod
    def validate_trigger(cls, v: str) -> str: ...
    @field_validator("files")
    @classmethod
    def validate_files(cls, v: List[GitChangeFile]) -> List[GitChangeFile]: ...

async def index_project(
    request: ProjectIndexRequest, background_tasks: BackgroundTasks
) -> Dict[str, Any]: ...
async def index_git_changes(
    request: GitChangesRequest, background_tasks: BackgroundTasks
) -> Dict[str, Any]: ...
async def _estimate_files_to_index(
    root: Path,
    patterns: List[str],
    exclude_patterns: List[str],
    respect_gitignore: bool,
    respect_acolyteignore: bool,
) -> int: ...
async def _run_project_indexing(
    task_id: str, project_root: Path, request: ProjectIndexRequest, estimated_files: int
) -> None: ...
async def _process_file_change(
    project_root: Path, file_change: GitChangeFile, trigger: str, commit_metadata: Dict[str, Any]
) -> Dict[str, Any]: ...
