from typing import List, Optional, Dict, ClassVar, Any
from acolyte.models.semantic_types import SummaryResult
from acolyte.models.chunk import Chunk
from acolyte.core.tracing import MetricsCollector

class Summarizer:
    ENTITY_PATTERNS: ClassVar[Dict[str, str]]
    INTENT_KEYWORDS: ClassVar[Dict[str, List[str]]]
    ACTION_KEYWORDS: ClassVar[Dict[str, List[str]]]
    token_counter: Any
    metrics: MetricsCollector

    def __init__(self) -> None: ...
    async def generate_summary(
        self, user_msg: str, assistant_msg: str, context_chunks: Optional[List[Chunk]] = ...
    ) -> SummaryResult: ...
    def _extract_entities(
        self, user_msg: str, assistant_msg: str, chunks: Optional[List[Chunk]] = ...
    ) -> List[str]: ...
    def _detect_intent(self, user_msg: str) -> str: ...
    def _extract_suggested_action(self, assistant_msg: str) -> str: ...
    def _format_summary(
        self, user_msg: str, assistant_msg: str, intent: str, action: str, entities: List[str]
    ) -> str: ...
    def _extract_main_intent(self, user_msg: str) -> str: ...
    def _extract_key_entities(self, entities: List[str]) -> List[str]: ...
