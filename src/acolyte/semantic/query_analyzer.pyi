from typing import List, Dict
from acolyte.models.semantic_types import TokenDistribution
from acolyte.core.tracing import MetricsCollector

class QueryAnalyzer:
    language: str
    generation_keywords: Dict[str, List[str]]
    simple_patterns: Dict[str, List[str]]
    metrics: MetricsCollector

    def __init__(self) -> None: ...
    def analyze_query_intent(self, query: str) -> TokenDistribution: ...
    def _is_generation_query(self, query: str, lang: str) -> bool: ...
    def _is_simple_question(self, query: str, lang: str) -> bool: ...
    def _get_default_generation_keywords(self) -> Dict[str, List[str]]: ...
    def _get_default_simple_patterns(self) -> Dict[str, List[str]]: ...
