from typing import Optional, List, Dict, Any
from acolyte.models.conversation import Conversation
from acolyte.models.task_checkpoint import TaskCheckpoint
from acolyte.core.tracing import MetricsCollector

class PromptBuilder:
    token_counter: Any
    metrics: MetricsCollector

    def __init__(self) -> None: ...
    def build_dynamic_context(
        self,
        project: Dict[str, Any],
        session: Conversation,
        task: Optional[TaskCheckpoint] = ...,
        recent_files: Optional[List[str]] = ...,
        recent_decisions: Optional[List[Any]] = ...,
        available_tokens: int = ...,
    ) -> str: ...
    def _build_project_section(
        self, project: Dict[str, Any], recent_files: Optional[List[str]] = ...
    ) -> str: ...
    def _build_session_section(
        self, session: Conversation, task: Optional[TaskCheckpoint] = ...
    ) -> str: ...
    def _build_continuity_section(self, task: TaskCheckpoint, session: Conversation) -> str: ...
    def _build_decisions_section(self, recent_decisions: List[Any]) -> str: ...
    def _build_capabilities_section(self) -> str: ...
    def _prioritize_context(self, sections: List[str], available_tokens: int) -> str: ...
