"""Type stubs for task_service module."""

from typing import List, Optional, Dict, Any
from acolyte.core.tracing import MetricsCollector
from acolyte.core.database import DatabaseManager
from acolyte.models.task_checkpoint import TaskCheckpoint, TaskType
from acolyte.models.technical_decision import TechnicalDecision

class TaskService:
    metrics: MetricsCollector
    db: DatabaseManager

    def __init__(self) -> None: ...
    async def create_task(
        self, title: str, description: str, task_type: TaskType, initial_session_id: str
    ) -> str: ...
    async def associate_session_to_task(self, task_id: str, session_id: str) -> None: ...
    async def get_task_full_context(self, task_id: str) -> Dict[str, Any]: ...
    async def save_technical_decision(self, decision: TechnicalDecision) -> None: ...
    async def find_active_task(self, user_id: str = "default") -> Optional[TaskCheckpoint]: ...
    async def complete_task(self, task_id: str) -> None: ...
    async def get_recent_decisions(
        self, task_id: str, limit: int = 5
    ) -> List[TechnicalDecision]: ...
    def _build_timeline(
        self, sessions: List[Dict[str, Any]], decisions: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]: ...
    def _extract_key_files(self, sessions: List[Dict[str, Any]]) -> List[str]: ...
    def _generate_task_summary(
        self, task: Dict[str, Any], sessions: List[Dict[str, Any]], decisions: List[Dict[str, Any]]
    ) -> str: ...
