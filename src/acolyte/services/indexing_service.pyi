"""Type stubs for indexing_service module."""

from pathlib import Path
from typing import List, Dict, Any, Optional, Pattern
import asyncio
from acolyte.core.tracing import MetricsCollector
from acolyte.core.secure_config import Settings
from acolyte.models.chunk import Chunk, ChunkType
from acolyte.models.document import DocumentType
from acolyte.rag.enrichment.service import EnrichmentService

ENRICHMENT_AVAILABLE: bool
EMBEDDINGS_AVAILABLE: bool
WEAVIATE_AVAILABLE: bool
ADAPTIVE_CHUNKER_AVAILABLE: bool

class IndexingService:
    metrics: MetricsCollector
    config: Settings
    _is_indexing: bool
    enrichment: Optional[EnrichmentService]
    embeddings: Optional[Any]
    weaviate: Optional[Any]
    batch_size: int
    max_file_size_mb: int
    concurrent_workers: int
    _ignore_patterns: List[Pattern[str]]
    _indexing_lock: asyncio.Lock
    def __init__(self) -> None: ...
    def _init_weaviate(self) -> None: ...
    def _load_ignore_patterns(self) -> None: ...
    def _glob_to_regex(self, pattern: str) -> Pattern[str]: ...
    def _should_ignore(self, file_path: str) -> bool: ...
    async def index_files(
        self, files: List[str], trigger: str = "manual", task_id: Optional[str] = None
    ) -> Dict[str, Any]: ...
    async def _filter_files(self, files: List[str]) -> List[str]: ...
    def _is_supported_file(self, path: Path) -> bool: ...
    async def _process_batch(self, files: List[str], trigger: str) -> Dict[str, Any]: ...
    async def _chunk_files(self, files: List[str]) -> List[Chunk]: ...
    def _detect_chunk_type(self, content: str, file_extension: str) -> ChunkType: ...
    def _infer_document_type(self, path: Path) -> DocumentType: ...
    def _detect_language(self, path: Path) -> str: ...
    def _prepare_weaviate_object(
        self, chunk: Chunk, enrichment_metadata: Dict[str, Any]
    ) -> Dict[str, Any]: ...
    async def _index_to_weaviate(self, data_object: Dict[str, Any], vector: Any) -> None: ...
    async def _notify_progress(
        self,
        progress: Dict[str, Any],
        task_id: Optional[str] = None,
        files_skipped: int = 0,
        chunks_created: int = 0,
        embeddings_generated: int = 0,
        errors_count: int = 0,
    ) -> None: ...
    async def estimate_files(
        self,
        root: Path,
        patterns: List[str],
        exclude_patterns: List[str],
        respect_gitignore: bool = True,
        respect_acolyteignore: bool = True,
    ) -> int: ...
    async def remove_file(self, file_path: str) -> bool: ...
    async def get_stats(self) -> Dict[str, Any]: ...
    async def rename_file(self, old_path: str, new_path: str) -> bool: ...
    def is_supported_file(self, path: Path) -> bool: ...
    def should_ignore(self, file_path: str) -> bool: ...
    @property
    def is_indexing(self) -> bool: ...
