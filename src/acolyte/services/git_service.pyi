from typing import List, Dict, Any, Tuple, Optional
from datetime import datetime, timedelta
from acolyte.core.tracing import MetricsCollector
from acolyte.core.events import EventBus
from git import Repo
from pathlib import Path

class GitService:
    metrics: MetricsCollector
    repo_path: Path
    event_bus: Optional[EventBus]
    _repo_cache: Optional[Repo]
    _repo_cache_time: Optional[datetime]
    _repo_cache_ttl: timedelta

    def __init__(self, repo_path: str, event_bus: Optional[EventBus] = None) -> None: ...
    @property
    def repo(self) -> Repo: ...
    def invalidate_repo_cache(self) -> None: ...
    async def detect_changes_from_others(self) -> List[Dict[str, Any]]: ...
    async def analyze_potential_conflicts(self, files_to_modify: List[str]) -> Dict[str, Any]: ...
    async def get_co_modification_patterns(
        self, file_path: str, days_back: int = 30
    ) -> List[Tuple[str, float]]: ...
    async def notify_in_chat(self, notification_type: str, data: Dict[str, Any]) -> str: ...
    def _notify_file_updated(self, data: Dict[str, Any]) -> str: ...
    def _notify_conflicts(self, data: Dict[str, Any]) -> str: ...
    def _notify_branch_change(self, data: Dict[str, Any]) -> str: ...
    def _notify_others_changes(self, data: Dict[str, Any]) -> str: ...
    async def _publish_cache_invalidation(
        self,
        reason: str,
        files: Optional[List[str]] = None,
        target_services: Optional[List[str]] = None,
    ) -> None: ...
    def get_most_recent_files(self, max_files: int = 10, days_back: int = 7) -> List[str]: ...
