"""Type stubs for installer module"""

from pathlib import Path
from typing import Dict, List, Optional, Any

class ProjectInfoCollector:
    project_path: Path
    project_name: str

    def __init__(self, project_path: Path) -> None: ...
    def collect_user_info(self) -> str: ...
    def collect_project_info(self) -> str: ...
    def detect_and_confirm_stack(self) -> Dict[str, List[str]]: ...
    def _auto_detect_stack(self) -> Dict[str, List[str]]: ...
    def _edit_stack(self, stack: Dict[str, List[str]]) -> Dict[str, List[str]]: ...

class AdvancedConfiguration:
    hardware: Dict[str, Any]

    def __init__(self, hardware: Dict[str, Any]) -> None: ...
    def configure_model(self) -> Dict[str, Any]: ...
    def _check_model_compatibility(
        self, model_info: Dict, ram_gb: int, gpu_info: Optional[Dict]
    ) -> str: ...
    def _configure_custom_model(self) -> Dict[str, Any]: ...
    def configure_ports(self) -> Dict[str, int]: ...
    def _configure_single_port(
        self, service: str, default: int, port_manager: Any, service_key: str
    ) -> int: ...
    def configure_resources(self, hardware: Dict[str, Any]) -> Dict[str, Any]: ...

class LanguageConfiguration:
    LINTERS: Dict[str, List[Dict[str, str]]]
    project_path: Path

    def __init__(self, project_path: Path) -> None: ...
    def detect_languages(self) -> List[str]: ...
    def configure_linters(self, languages: List[str]) -> Dict[str, Dict[str, str]]: ...
    def configure_ignore_patterns(self) -> List[str]: ...

class ProjectInstaller:
    project_path: Path
    project_file: Path
    global_dir: Path
    project_id: str
    project_global_dir: Path
    config_path: Path

    def __init__(self, project_path: Path, global_dir: Optional[Path] = None) -> None: ...
    async def run(self) -> bool: ...
    async def _collect_configuration(self) -> Dict[str, Any]: ...
    def _detect_code_style(self) -> Dict[str, Any]: ...
    def _show_configuration_summary(self, config: Dict[str, Any]) -> None: ...
    def _save_configuration(self, config: Dict[str, Any]) -> None: ...
    def _generate_docker_files(self, config: Dict[str, Any]) -> None: ...
    def _generate_modelfile(self, config: Dict[str, Any]) -> None: ...
    def _initialize_database(self, config: Dict[str, Any]) -> None: ...
    def _show_completion(self, config: Dict[str, Any]) -> None: ...
