"""Type stubs for init module"""

from pathlib import Path
from typing import Dict, List, Tuple, Optional, Any

class DependencyChecker:
    REQUIRED_TOOLS: Dict[str, Dict[str, Any]]

    @classmethod
    def check_tool(cls, tool_name: str, tool_info: Dict[str, Any]) -> Tuple[bool, str]: ...
    @classmethod
    def check_all(cls) -> Tuple[bool, Dict[str, Tuple[bool, str]]]: ...

class ProjectValidator:
    VALID_PROJECT_MARKERS: List[str]

    @classmethod
    def is_valid_project_directory(cls, path: Path) -> Tuple[bool, str]: ...
    @classmethod
    def _detect_project_type(cls, path: Path, markers: List[str]) -> str: ...
    @classmethod
    def ensure_git_initialized(cls, path: Path) -> bool: ...

class GitHooksManager:
    HOOK_NAMES: List[str]

    @classmethod
    def install_hooks(cls, project_path: Path) -> bool: ...
    @classmethod
    def _install_single_hook(cls, hooks_dir: Path, hook_name: str) -> bool: ...

class ProjectInitializer:
    project_path: Path
    global_dir: Path
    project_id: str

    def __init__(self, project_path: Path, global_dir: Optional[Path] = None) -> None: ...
    def _generate_project_id(self) -> str: ...
    def check_already_initialized(self) -> Tuple[bool, Optional[str]]: ...
    def create_project_structure(self) -> bool: ...
    def run(self, project_name: Optional[str] = None, force: bool = False) -> bool: ...
    def _show_next_steps(self) -> None: ...
