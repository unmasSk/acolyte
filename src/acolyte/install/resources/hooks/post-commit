#!/usr/bin/env python3
"""
Git hook que se ejecuta después de cada commit.
Notifica a ACOLYTE sobre los archivos modificados en el commit.
"""
import subprocess
import requests
import json
import sys
from pathlib import Path

def get_acolyte_config():
    """Lee el puerto de ACOLYTE desde .acolyte"""
    try:
        acolyte_file = Path.cwd() / '.acolyte'
        if acolyte_file.exists():
            import yaml
            with open(acolyte_file, 'r') as f:
                config = yaml.safe_load(f)
                return config.get('ports', {}).get('backend', 8000)
    except (OSError, yaml.YAMLError, KeyError, TypeError) as e:
        # Log error but continue with default port
        print(f"Warning: Could not read ACOLYTE config: {e}", file=sys.stderr)
    return 8000
def get_changed_files():
    """Obtiene archivos modificados en el último commit"""
    try:
        # Archivos cambiados en el último commit
        result = subprocess.run(
            ['git', 'diff-tree', '--no-commit-id', '--name-only', '-r', 'HEAD'],
            capture_output=True,
            text=True,
            check=True
        )
        return [f.strip() for f in result.stdout.splitlines() if f.strip()]
    except subprocess.CalledProcessError:
        return []

def notify_acolyte(files):
    """Notifica a ACOLYTE sobre los cambios"""
    port = get_acolyte_config()
    url = f"http://localhost:{port}/api/index/git-changes"
    
    try:
        # Obtener mensaje del commit
        commit_msg = subprocess.run(
            ['git', 'log', '-1', '--pretty=%B'],
            capture_output=True,
            text=True
        ).stdout.strip()
        
        response = requests.post(url, json={
            'trigger': 'commit',
            'files': files,
            'metadata': {
                'commit_message': commit_msg,
                'event': 'post-commit'
            }
        }, timeout=5)
        
        if response.status_code != 200:
            print(f"ACOLYTE: Error al notificar cambios (status {response.status_code})")
    except requests.exceptions.ConnectionError:
        # ACOLYTE no está corriendo, lo cual es OK
        pass
    except Exception as e:
        print(f"ACOLYTE: Error inesperado: {e}")

if __name__ == "__main__":
    files = get_changed_files()
    if files:
        notify_acolyte(files)
