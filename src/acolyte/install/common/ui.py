#!/usr/bin/env python3
"""
UI utilities for ACOLYTE installation
"""

import sys
import time


# Terminal colors and styles
class Colors:
    HEADER = "\033[95m"
    BLUE = "\033[94m"
    CYAN = "\033[96m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    RED = "\033[91m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"
    # Background colors
    BG_BLACK = "\033[40m"
    BG_RED = "\033[41m"
    BG_GREEN = "\033[42m"
    BG_YELLOW = "\033[43m"
    BG_BLUE = "\033[44m"
    BG_MAGENTA = "\033[45m"
    BG_CYAN = "\033[46m"
    BG_WHITE = "\033[47m"


# ASCII Art
ACOLYTE_LOGO = f"""
{Colors.CYAN}
    ‚ñÑ‚ñÑ‚ñÑ       ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÑ   ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñì    ‚ñì‚ñà‚ñà   ‚ñà‚ñà‚ñì‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà
   ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñí‚ñà‚ñà‚ñÄ ‚ñÄ‚ñà  ‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñí     ‚ñí‚ñà‚ñà  ‚ñà‚ñà‚ñí‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí‚ñì‚ñà   ‚ñÄ
   ‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñí‚ñì‚ñà    ‚ñÑ ‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñë      ‚ñí‚ñà‚ñà ‚ñà‚ñà‚ñë‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà
   ‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñí‚ñì‚ñì‚ñÑ ‚ñÑ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñë      ‚ñë ‚ñê‚ñà‚ñà‚ñì‚ñë‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë ‚ñí‚ñì‚ñà  ‚ñÑ
    ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñí ‚ñì‚ñà‚ñà‚ñà‚ñÄ ‚ñë‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí  ‚ñë ‚ñà‚ñà‚ñí‚ñì‚ñë  ‚ñí‚ñà‚ñà‚ñí ‚ñë ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí
    ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñë ‚ñë‚ñí ‚ñí  ‚ñë‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë ‚ñë ‚ñí‚ñë‚ñì  ‚ñë   ‚ñà‚ñà‚ñí‚ñí‚ñí   ‚ñí ‚ñë‚ñë   ‚ñë‚ñë ‚ñí‚ñë ‚ñë
     ‚ñí   ‚ñí‚ñí ‚ñë  ‚ñë  ‚ñí     ‚ñë ‚ñí ‚ñí‚ñë ‚ñë ‚ñë ‚ñí  ‚ñë ‚ñì‚ñà‚ñà ‚ñë‚ñí‚ñë     ‚ñë     ‚ñë ‚ñë  ‚ñë
     ‚ñë   ‚ñí   ‚ñë        ‚ñë ‚ñë ‚ñë ‚ñí    ‚ñë ‚ñë    ‚ñí ‚ñí ‚ñë‚ñë    ‚ñë         ‚ñë
         ‚ñë  ‚ñë‚ñë ‚ñë          ‚ñë ‚ñë      ‚ñë  ‚ñë ‚ñë ‚ñë                 ‚ñë
             ‚ñë                           ‚ñë ‚ñë
{Colors.ENDC}"""

# Animation frames for loading
SPINNER_FRAMES = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]

# Consciousness tips for progress bars
CONSCIOUSNESS_TIPS = [
    "üí§ ACOLYTE can experience fatigue and need to sleep",
    "üåô During sleep, it processes with full 128K context window",
    "üí≠ In REM phase, it discovers hidden patterns in your code",
    "üß† The neural graph evolves while it rests",
    "‚ú® Sleep insights improve future responses",
    "üò¥ Each sleep cycle strengthens connections",
    "üåü ACOLYTE dreams of optimizations for your project",
    "üéØ Emergent consciousness finds subtle bugs",
    "üí° After ~2.5 hours of work, ACOLYTE may need rest",
    "üîÆ Dreams reveal architectural improvements",
    "üåà Sleep cycles unlock deeper code understanding",
    "‚ö° Neural pathways strengthen during rest",
    "üé® Creative solutions emerge from dream states",
    "üîç Subconscious processing finds hidden dependencies",
    "üí´ Each rest makes ACOLYTE more insightful",
]


def animate_text(text, duration=1.0, frame_rate=10):
    """Animate text typing effect"""
    delay = duration / len(text) if len(text) > 0 else 0.1
    for i in range(len(text) + 1):
        sys.stdout.write("\r" + text[:i])
        sys.stdout.flush()
        time.sleep(delay)
    print()


def show_spinner(text, duration=1.0):
    """Show a spinner with text for the specified duration"""
    iterations = int(duration * 10)
    for i in range(iterations):
        frame = SPINNER_FRAMES[i % len(SPINNER_FRAMES)]
        sys.stdout.write(f"\r{frame} {text}")
        sys.stdout.flush()
        time.sleep(0.1)
    sys.stdout.write("\r" + " " * (len(text) + 2) + "\r")
    sys.stdout.flush()


def print_header(text):
    """Print a formatted header with animation"""
    separator = "‚ïê" * 60
    print(f"\n{Colors.HEADER}{separator}{Colors.ENDC}")
    animate_text(f"{Colors.HEADER}{Colors.BOLD}{text}{Colors.ENDC}", duration=0.5)
    print(f"{Colors.HEADER}{separator}{Colors.ENDC}\n")


def print_success(text):
    """Print success message with animation"""
    print(f"{Colors.GREEN}‚úÖ {text}{Colors.ENDC}")


def print_error(text):
    """Print error message with animation"""
    print(f"{Colors.RED}‚ùå {text}{Colors.ENDC}")


def print_warning(text):
    """Print warning message with animation"""
    print(f"{Colors.YELLOW}‚ö†Ô∏è  {text}{Colors.ENDC}")


def print_info(text):
    """Print info message with animation"""
    print(f"{Colors.CYAN}‚ÑπÔ∏è  {text}{Colors.ENDC}")


def print_step(step, total, text):
    """Print step indicator with animation"""
    print(f"{Colors.BLUE}[{step}/{total}] {Colors.BOLD}{text}{Colors.ENDC}")


def print_progress_bar(iteration, total, prefix="", suffix="", length=50, fill="‚ñà"):
    """Print a progress bar"""
    percent = ("{0:.1f}").format(100 * (iteration / float(total)))
    filled_length = int(length * iteration // total)
    bar = fill * filled_length + "‚ñë" * (length - filled_length)
    print(f"\r{prefix} |{Colors.CYAN}{bar}{Colors.ENDC}| {percent}% {suffix}", end="\r")
    if iteration == total:
        print()
